---
name: Production Build and Deploy

on:
  push:
    branches:
      - master

jobs:
  docker:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    name: "Build"

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        
      - name: Build Container
        run: docker build -t weby .

      - name: Start Containers
        run: docker-compose -f "docker-compose.yml" up -d
 
      - name: Precompile assets
        env:
          STORAGE_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          STORAGE_ACCESS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          STORAGE_BUCKET: ${{ secrets.STORAGE_BUCKET }}
          STORAGE_HOST: ${{ secrets.storage_HOST }}
          RAILS_ENV: production
        run: docker-compose run weby bundle exec rake assets:precompile --trace RAILS_ENV="${{ env.RAILS_ENV }}" FOG_PROVIDER="AWS" STORAGE_ACCESS_KEY="${{ env.STORAGE_ACCESS_KEY }}" STORAGE_ACCESS_SECRET="${{ env.STORAGE_ACCESS_SECRET }}" STORAGE_BUCKET="${{ env.STORAGE_BUCKET }}" STORAGE_HOST="${{ env.STORAGE_HOST }}"

      - name: Stop Containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image version
        id: docker-image-version
        run: docker image inspect --format='{{ index .Config.Labels "com.weby.version" }}' weby

      - name: Tag Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: weby
          IMAGE_TAG: ${{ steps.docker-image-version.outputs.* }}
        run: docker tag weby $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: weby
          IMAGE_TAG: ${{ steps.docker-image-version.outputs.* }}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Tag Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: weby
          IMAGE_TAG: latest
        run: docker tag weby $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: weby
          IMAGE_TAG: latest
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  terraform:
    name: "Deploy"
    timeout-minutes: 45
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.4
  
      - name: Terraform Init
        run: terraform -chdir=terraform/ init
        env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      - name: Terraform Format
        run: terraform -chdir=terraform/ fmt -check
  
      - name: Terraform Plan
        run: terraform -chdir=terraform/ plan
        env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      - name: Terraform Apply
        run: terraform -chdir=terraform/ apply -auto-approve -var=image_tag=${{ steps.docker-image-version.outputs.* }}
        env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
